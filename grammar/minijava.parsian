(*
Grammar for MiniJava language
(see http://www.cambridge.org/resources/052182060X/MCIIJ2e/grammar.htm)
Author: Thomas Bollmeier 2018 <entwickler@tbollmeier.de>
Version: 0.1.0
*)

-- Lexical elements

comment '//' '\n';
comment '/*' '*/' enable_nesting;

symbol AND '&&';
symbol LT '<';
symbol PLUS '+';
symbol MINUS '-';
symbol MULT '*';
symbol LBRACE '{';
symbol RBRACE '}';
symbol LPAR '(';
symbol RPAR ')';
symbol LSQBR '[';
symbol RSQBR ']';
symbol EQ '=';
symbol DOT '\.';
symbol SEMICOLON ';';
symbol COMMA ',';
symbol EXCL_MARK '!';

token PRINT /System\.out\.println/;
token ID /[a-zA-Z_][a-zA-Z_0-9]*/;
token INT /\d+/;

-- Production rules

@root
goal -> main_class class_decl*;

main_class -> 'class' clsname#ID
    LBRACE
        main_signature LBRACE
            statement
        RBRACE
    RBRACE;

main_signature -> 'public' 'static' 'void' 'main'
    LPAR 'String' LSQBR RSQBR args#ID RPAR;

class_decl -> 'class' clsname#ID ('extends' super#ID)?
    LBRACE
        var_decl*
        method_decl*
    RBRACE;

var_decl -> type ID SEMICOLON;

method_decl -> 'public' type method_signature LBRACE
    var_decl*
    statement*
    'return' expr SEMICOLON
RBRACE;

method_signature -> ID LPAR
    (type ID (COMMA type ID)*)?
RPAR;

type -> 'int' (array#LSQBR RSQBR)? | 'boolean' | ID;

statement ->
    block_stmt |
    if_stmt |
    while_stmt |
    print_stmt |
    assignment;

block_stmt -> LBRACE statement* RBRACE;

if_stmt -> 'if' LPAR expr RPAR statement 'else' statement;

while_stmt -> 'while' LPAR expr RPAR statement;

print_stmt -> PRINT LPAR expr RPAR SEMICOLON;

assignment -> ID (LSQBR idx#expr RSQBR)? EQ expr SEMICOLON;

expr -> binary_expr;

binary_expr -> op1#op_expr (operator op2#expr)?;

operator -> AND | LT | PLUS | MINUS | MULT;

op_expr -> base_expr (DOT 'length' | (elem_access|call)+ )?;

base_expr ->
    INT |
    bool_expr |
    ID |
    'this' |
    constructor_call |
    negation |
    group;

bool_expr -> 'true' | 'false';

constructor_call -> 'new' ('int' LSQBR expr RSQBR | ID LPAR RPAR);

negation -> EXCL_MARK expr;

group -> LPAR expr RPAR;

elem_access -> LSQBR expr RSQBR;

call -> DOT ID LPAR (expr (COMMA expr)*)? RPAR;
